/**
 * <copyright>
 *
 * Copyright (c) 2015 PlugBee. All rights reserved.
 * 
 * This program and the accompanying materials are made available 
 * under the terms of the Eclipse Public License v1.0 which 
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Amine Lajmi - Initial API and implementation
 *
 * </copyright>
 */
package org.dslforge.xtext.generator.web.editor.widget

import org.dslforge.xtext.generator.IWebProjectGenerator
import org.dslforge.xtext.generator.util.GeneratorUtil
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.Grammar
import org.eclipse.xtext.generator.IFileSystemAccess

class GenWidget implements IWebProjectGenerator{
	
	val JavaRelativePath = "/editor/widget/"
	val JsRelativePath = "/"
	var String projectName
	var String grammarShortName
	var String basePath
	var Grammar grammar
	var String keywordList;
	
	override doGenerate(EObject input, IFileSystemAccess fsa) {
		grammar = input as Grammar
		projectName=GeneratorUtil::getProjectName(grammar)
		grammarShortName= GeneratorUtil::getGrammarShortName(grammar)
		basePath=GeneratorUtil::getBasePath(grammar)
		keywordList = GeneratorUtil::getKeywords(grammar, ",", true)
		fsa.generateFile(basePath + JavaRelativePath + grammarShortName + ".java", "src-gen", toJava())
		fsa.generateFile(basePath + JsRelativePath + grammarShortName + ".js", "src-js", toJavaScript())
	}

	def toJava()'''
/**
 * @Generated by DSLFORGE
 */
package «projectName».editor.widget;

import java.util.ArrayList;
import java.util.List;

import org.dslforge.styledtext.BasicText;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.rap.rwt.remote.Connection;
import org.eclipse.rap.rwt.remote.RemoteObject;
import org.eclipse.swt.widgets.Composite;

public class «grammarShortName» extends BasicText {
	
	private static final long serialVersionUID = 1L;
	
	private static final String REMOTE_TYPE = "«projectName».editor.widget.«grammarShortName»";
	
	public «grammarShortName»(Composite parent, int style) {
		super(parent, style);
	}
	
	@Override
	protected RemoteObject createRemoteObject(Connection connection) {
		return connection.createRemoteObject(REMOTE_TYPE);
	}
	
	@Override 
	protected void setupClient() {
		super.setupClient();
		List<IPath> languageResources = new ArrayList<IPath>();
		languageResources.add(new Path("src-js/«basePath»/ace/theme-eclipse.js"));
		languageResources.add(new Path("src-js/«basePath»/ace/snippets/«grammarShortName.toLowerCase».js"));		
		languageResources.add(new Path("src-js/«basePath»/ace/mode-«grammarShortName.toLowerCase».js"));
		languageResources.add(new Path("src-js/«basePath»/ace/worker-«grammarShortName.toLowerCase».js"));
		languageResources.add(new Path("src-js/«basePath»/parser/antlr-all-min.js"));
		languageResources.add(new Path("src-js/«basePath»/parser/Internal«grammarShortName»Parser.js"));
		languageResources.add(new Path("src-js/«basePath»/parser/Internal«grammarShortName»Lexer.js"));
		registerClientResources(languageResources, getClassLoader());
		loadClientResources(languageResources);
	}

	@Override
	protected ClassLoader getClassLoader() {
		ClassLoader classLoader = «grammarShortName».class.getClassLoader();
		return classLoader;
	}
}
'''

	def toJavaScript()'''
/**
 * @Generated by DSLFORGE
 */
//minify using as YUI Compressor, Google Closure Compiler, or JSMin. 
(function() {
	rap.registerTypeHandler("«projectName».editor.widget.«grammarShortName»", {
		factory : function(properties) {
			return new «projectName».editor.widget.«grammarShortName»(properties);
		},
		destructor : "destroy",	 
		properties : [ "url", "text", "editable", "status", "annotations", "scope", "proposals", "font", "dirty", "markers", "background"],
		events : ["Modify", "TextChanged", "Save", "FocusIn", "FocusOut", "Selection", "CaretEvent", "ContentAssist"],
		methods : ["addMarker", "insertText", "removeText", "setProposals"]
	});

	rwt.qx.Class.define("«projectName».editor.widget.«grammarShortName»", {
		extend :org.dslforge.styledtext.BasicText,
		construct : function(properties) {
			this.base(arguments, properties);
		},
		members : {
		
			setScope : function(scope) {
				this.base(arguments, scope);
			},
		
			onCompletionRequest : function(pos, prefix, callback) {
				if (this.isFocused) {
					var remoteObject = rap.getRemoteObject(this);
					if (remoteObject) {
						remoteObject.call("getProposals", { value : this.editor.getValue(), pos : pos, prefix : prefix});
					}	
					var proposals = this._proposals==null?[]:this._proposals;		
			        var wordList = Object.keys(proposals);
			        callback(null, wordList.map(function(word) {
			            return {
			            	iconClass: " " + typeToIcon(word[0]),
			                name: word,
			                value: proposals[word],
			                score: 1,
			                meta: "[" + "keyword" + "]"
			            };
			        }));	
				}
			},
			
			setProposals : function(proposals) {
				this._proposals = proposals;	
			},
			
			createEditor : function() {
				var basePath = 'rwt-resources/src-js/org/dslforge/styledtext/ace';
				ace.require("ace/config").set("basePath", basePath);
				var workerPath = 'rwt-resources/src-js/«basePath»/ace';
				ace.require("ace/config").set("workerPath", workerPath);
				var themePath = 'rwt-resources/src-js/«basePath»/ace';
				ace.require("ace/config").set("themePath", themePath);
				var editor = this.editor = ace.edit(this.element);
				var editable = this.editable;				
				if (editor != null) {

					//Set the Id of this editor
					var guid = this._url;
					
					//Set language mode
					editor.getSession().setMode("ace/mode/«grammarShortName.toLowerCase»");	

					//Set theme
					editor.setTheme("ace/theme/eclipse");	

					//Default settings
					editor.getSession().setUseWrapMode(true);
				    editor.getSession().setTabSize(4);
				    editor.getSession().setUseSoftTabs(true);
					editor.getSession().getUndoManager().reset();
					editor.setShowPrintMargin(false);		 
					editor.setReadOnly(!editable);		
					editor.$blockScrolling = Infinity;
					
					//Load content assist module
					this.langTools = ace.require("ace/ext/language_tools");
					
					//Initialize the global index
					if (this._scope==null) 
						this._scope=[];
					
					//Initialize the completion proposals
					if (this._proposals==null) 
						this._proposals=[];
					
					var self = this;
					this.globalScope = {	
						getCompletions: function(editor, session, pos, prefix, callback) {
							self.onCompletionRequest(pos, prefix, callback);	
						}
					}
					
					//Add completer and enable content assist
					this.langTools.addCompleter(this.globalScope);
					editor.setOptions({
					    enableBasicAutocompletion: true,
					    enableSnippets: true
					});	
					this.completers = editor.completers;			
	
					//Add documentation hover
					var TokenTooltip = ace.require("ace/ext/tooltip").TokenTooltip;	
					editor.tokenTooltip = new TokenTooltip(editor);		 	

				 	//Initialize the index
				 	index = this._scope;

				 	//Initialize the completion proposals
				 	proposals = this._proposals;
				 	
					//Handle the global index
				 	if (this.useSharedWorker) {
						if (typeof SharedWorker == 'undefined') {	
							alert("Your browser does not support JavaScript shared workers.");
						} else {
							//Compute worker's http URL
							var filePath = 'rwt-resources/src-js/org/dslforge/styledtext/global-index.js';
							var httpURL = computeWorkerPath(filePath);
							var worker = this.worker = new SharedWorker(httpURL);		
							editor.on("change", function(event) {					        
								worker.port.postMessage({
									message: editor.getValue(), 
							        guid: guid, 
							        index: index
							    });
						    });
							worker.port.onmessage = function(e) {
							 	//update the index reference
							 	index = e.data.index;
						    };	

						}	
				 	}

				 	//On focus get event
					editor.on("focus", function() {
				 		self.onFocus();
				 	});
					
					//On focus lost event
				 	editor.on("blur", function() {
				 		self.onBlur();
				 	});
				 	
				 	//On input event
				 	editor.on("input", function() {
						if (!editor.getSession().getUndoManager().isClean())
							self.onModify();
				 	});
				 	
				 	//On mouse down event
				 	editor.on("mousedown", function() { 
				 	    // Store the Row/column values 
				 	}) 
				 	
				 	//On cursor move event
				 	editor.getSession().getSelection().on('changeCursor', function() { 
				 	    if (editor.$mouseHandler.isMousePressed)  {
				 	      // the cursor changed using the mouse
				 	    }
				 	    // the cursor changed
				 	    self.onChangeCursor();
				 	});
				 	editor.getSession().on('changeCursor', function() { 
				 	    if (editor.$mouseHandler.isMousePressed)  {
				 	      // remove last stored values 
				 	     console.log("remove last stored values");
				 	    }
				 	    // Store the Row/column values 
				 	    console.log("store the row/column values");
				 	}); 
				 	
				 	//On text change event
					editor.on("change", function(event) {					        
						// customize
			        });	
					
					//Bind keyboard shorcuts
					editor.commands.addCommand({
						name: 'saveFile',
						bindKey: {
						win: 'Ctrl-S',
						mac: 'Command-S',
						sender: 'editor|cli'
						},
						exec: function(env, args, request) {
							self.onSave();
						}
					});
					
					//Done
			        this.onReady();
				}
			},
		}
	});
	
	var computeWorkerPath = function (path) {
        path = path.replace(/^[a-z]+:\/\/[^\/]+/, "");
        path = location.protocol + "//" + location.host
            + (path.charAt(0) == "/" ? "" : location.pathname.replace(/\/[^\/]*$/, ""))
            + "/" + path.replace(/^[\/]+/, "");
        return path;
    };
    
	var typeToIcon = function(type) {
		var cls = "ace-";
		var suffix;
		if (type == "?") suffix = "unknown";
		else if (type == "number" || type == "string" || type == "bool") suffix = type;
		else if (/^fn\(/.test(type)) suffix = "fn";
		else if (/^\[/.test(type)) suffix = "array";
		else suffix = "object";
		return cls + "completion " + cls + "completion-" + suffix;
	};
	
}());
'''
	override doGenerate(Resource input, IFileSystemAccess fsa) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
}