(function() {
	rap.registerTypeHandler("org.xtext.example.domainmodel.web.editor.widget.Domainmodel", {
		factory : function(properties) {
			return new org.xtext.example.domainmodel.web.editor.widget.Domainmodel(properties);
		},
		properties : [ "text", "command", "issue", "url", "scope" ]
	});

	rwt.qx.Class.define("org.xtext.example.domainmodel.web.editor.widget.Domainmodel", {
		extend : rwt.widgets.Composite,

		construct : function(properties) {
			this.base(arguments);
			bindAll(this, [ "layout", "onModify", "onReady", "onSend", "onRender", "onSave" ]);
			this.parent = rap.getObject(properties.parent);
			this.element = document.createElement( "pre" );
			this.element.id = "editor";
			this.element.style.position = "absolute";
			
			var area = this.parent.getClientArea();
			this.element.style.left = area[0] + "px";
			this.element.style.top = (area[1]-10) + "px";
			this.element.style.width = area[2] + 'px';
			this.element.style.height = (area[3]-5) + 'px';		
			this.element.style.fontSize = '12pt';
			
			this.parent.append(this.element);
			this.flush();
			this.parent.addListener("Resize", this.layout);
			rap.on( "render", this.onRender );
			this._scope = [];
		},

		destruct : function() {
			rap.off("send", this.onSend);
			this.editor.destroy();
			this.element.parentNode.removeChild(this.element);
		},
		
		members : {
			
			ready: false,
			editor: null,
			worker: null,
			isFocused: false,
			completionInstalled: false,
			
			onModify : function() {
				alert("on Modify");
			},

			onReady : function() {
				this.ready = true;
				this.layout();
				if (this._text) {
					this.editor.setValue(this._text);
					delete this._text;
				}
				if (this._font) {
					delete this._font;
				}
				if (this._command) {
					delete this._command;
				}
				if (this._url) {
					delete this._url;
				}
				if (this._issue) {
					delete this._issue;
				}
				if (this._scope) {
					delete this._scope;
				}
			},
			
			onAppear: function() {
				console.log("on Appear");	
			},

			onRender : function() {
				if (this.element.parentNode) {
					rap.off("render", this.onRender);
					this.addEditor();
					this.editor.on("instanceReady", this.onReady);
					rap.on("send", this.onSend);
				}
			},
		
			onSend : function() {
				if (rap) {
					rap.getRemoteObject(this).set("text",this.editor.getValue());
					rap.getRemoteObject(this).set("command","edit");
				}
			},
			
			onSave: function() {
				rap.getRemoteObject(this).set("text",this.editor.getValue());
				rap.getRemoteObject(this).set("command","save");
			},
			
			addEditor : function() {
				//the guid associated to this editor
				var guid = this._url;
				this._scope = [];
				
				var editor = this.editor = ace.edit(this.element);				
				if (editor != null) {					
					editor.setTheme("ace/theme/eclipse");				
					editor.getSession().setMode("ace/mode/domainmodel");
					
					var langTools = ace.require("ace/ext/language_tools");
					var globalScope = {	
						getCompletions: function(editor, session, pos, prefix, callback) {
							//////////////////////
							if (!session==editor.getSession()) {
								return;
							}
							if (!isFocused)
								alert("focus");
								return;
							console.log("global scope of " + guid);
					        var completions = [];
					        
					        //filter simple types from references
					        var simpleTypes = ['string','bool','int','real','double'];
					        
				            for (var i = this._scope.length; i--;) {
					            //if the reference does not contain the prefix of this editor, then keep it
				            	if (this._scope[i].indexOf(guid)<=-1) {
					            	console.log("	=> added to index " + this._scope[i])
					            	var reference = this._scope[i].substring(this._scope[i].indexOf("#")+1, this._scope[i].length); //A
					            	if (simpleTypes.indexOf(reference)<=-1) {
						            	var prefix = this._scope[i].substring(0, this._scope[i].indexOf("."));
						            	var fqn = prefix + "." + reference;

							            completions.push({
							            	name: reference,
											value: reference,
											score: 1,
							                meta: reference + " - " + "global"
							            });	
					            	}
					            }
				            }
					        callback(null, completions);
					        //////////////////////////
						}
					}
					
					//Add completer and enable content assist
					langTools.addCompleter(globalScope);					
					editor.setOptions({
					    enableBasicAutocompletion: true
					});
					
					//GLOBAL INDEX
					if (typeof SharedWorker == 'undefined') {	
						alert("Your current browser does not support JavaScript shared workers.");
					} else {
						
						//Compute worker's http URL
					    var filePath = 'rwt-resources/src-js/org/xtext/example/domainmodel/web/global-index.js';
					    var httpURL = computeWorkerPath(filePath);

						//Create the index
						var worker = this.worker = new SharedWorker(httpURL);
					    
					 	editor.on("focus", function() {
					 		isFocused=true;
					 	});
					 	editor.on("blur", function() {
					 		isFocused=false;
					 	});
					 	
						editor.on("change", function() {
							
							var words = this._scope;
							if (this._scope!=null) {
					        	worker.port.postMessage({
					            	message: editor.getValue(), 
					            	guid: guid, 
					            	index: words
					            	});
							}

							///////////////////////////////////////
//					    	var splitRegex = /[^a-zA-Z_0-9\$\-]+/;
//					    	var session = editor.getSession();				    		
//					    	var words = session.getValue().split(splitRegex);			    		
//					    	//Remove keywords from the list
//					    	var keywords = ['op','extends','entity','package','code','import'];				    		
//					    	var filtered = [];
//					    	var found = false;
//					    	var k = 0;
//					    	for (var i=0; i<words.length;i++) {
//					    		if (words[i].length>0){
//					    			for (var j=0; j<keywords.length;j++) {
//					    				if (words[i]==keywords[j]) {
//					    					found=true;
//					    				}
//					    			}
//					    			if (!found) {
//					    				//Append the editor id to the ID
//					    				filtered[k] = guid + "#" + words[i];
//					    				k++;
//					    			}
//					    		}
//					    		found=false;
//					    	}
//					    	
//				        	worker.port.postMessage({
//				            	message: editor.getValue(), 
//				            	guid: guid, 
//				            	index: filtered
//				            	});
				        	/////////////////////////////////////////////////
				        });
													
					 	worker.port.onmessage = function(e) {
					 		console.log(
					 		//	"call number: " + e.data.counter + "\n"+
					 		//	"message: " + e.data.message + "\n" +
					 			"editor Id: " + e.data.guid + "\n" +
					 			"index: " + e.data.index
					 		);
					 		//update the index reference
					 		this._scope = e.data.index;
				        };
						
					}	

				    //Bind keyboard shorcuts
					editor.commands.addCommand({
						name: 'saveFile',
						bindKey: {
						win: 'Ctrl-S',
						mac: 'Command-S',
						sender: 'editor|cli'
						},
						exec: function(env, args, request) {
							rap.getRemoteObject(this).set("text",this.editor.getValue());
							rap.getRemoteObject(this).set("command","save");
						}
					});
					
					//Done
			        this.onReady();
				}
			},

			setText : function(text) {
				if (this.ready) {
					this.editor.setValue(text);	
				}
				else {
			        this._text = text;
			    }
			},
			
			setCommand : function(command) {
			   this._command = command;
			   if (this._command=='valid') {
				   var annotations = this.editor.session.getAnnotations();
		        	var filtered = [];
		        	this.editor.session.clearAnnotations();
		            for (var i = 0; i < annotations.length; i++) {
		                var annotation = annotations[i];
		                var type = annotation.type;
		                if (type != "warning") {
		                	filtered.push(annotation)
		                }
		            }
		            this.editor.session.setAnnotations(filtered);
			   }
			},
			
			setIssue : function(issue) {
				this._issue = issue;
				   if (this._command=='invalid') {
						console.log("=> command = " + this._command);
						console.log("=> annotation = " + this._issue); 
						var positions = this._issue.match(/\d+/g);
						this.editor.session.setAnnotations([ {row:Math.max(positions[0]-1,0) ,column: 0, text: this._issue, type:"warning"} ]); 
				   }		  
				   else if (this._command=='valid') {
					   console.log("=> command = " + this._command);
					   console.log("=>valid!")   
					   this.editor.session.clearAnnotations();
				   }
			},
			
			setUrl : function(url) {
				this._url = url;
			},
			
			setScope : function(scope) {
			    this._scope = scope;	
			    alert("index: " + this._scope);
		    	if(this.worker!=null) {
		        	this.worker.port.postMessage({
		            	message: this.editor.getValue(), 
		            	guid: this._url, 
		            	index: this._scope
		            });
		        	
				 	this.worker.port.onmessage = function(e) {
				 		alert(
				 		//	"call number: " + e.data.counter + "\n"+
				 		//	"message: " + e.data.message + "\n" +
				 			"editor Id: " + e.data.guid + "\n" +
				 			"index: " + e.data.index
				 		);
				 		//update the index reference
				 		this.scope = e.data.index;
			        };
			        
		    	} else {
		    		alert("worker is null");
		    	}
			},
			
			setFont : function(font) {
				if (this.ready) {
					async(this, function() { // Needed by IE for some reason
						this.editor.document.getBody().setStyle("font", font);
					});
				} else {
					this._font = font;
				}
			},
			
			flush : function(inResponse) {
				if (inResponse) {
					rwt.remote.EventUtil.setSuspended(true);
					rwt.widgets.base.Widget.flushGlobalQueues();
					rwt.remote.EventUtil.setSuspended(false);
				} else {
					rwt.widgets.base.Widget.flushGlobalQueues();
				}	
			},
			

			layout : function() {
				if (this.ready) {
					var area = this.parent.getClientArea();
					this.element.style.left = area[0] + "px";
					this.element.style.top = (area[1]-10) + "px";
					this.element.style.width = area[2] + 'px';
					this.element.style.height = (area[3]-5) + 'px';		
					this.element.style.fontSize = '12pt';
					this.editor.resize();
				}
			}
		}
	});

	var bind = function(context, method) {
		return function() {
			return method.apply(context, arguments);
		};
	};

	var bindAll = function(context, methodNames) {
		for ( var i = 0; i < methodNames.length; i++) {
			var method = context[methodNames[i]];
			context[methodNames[i]] = bind(context, method);
		}
	};
	

	var async = function(context, func) {
		window.setTimeout(function() {
			func.apply(context);
		}, 0);
	};

	var computeWorkerPath = function (path) {
        path = path.replace(/^[a-z]+:\/\/[^\/]+/, ""); // Remove domain name and rebuild it
        path = location.protocol + "//" + location.host
            + (path.charAt(0) == "/" ? "" : location.pathname.replace(/\/[^\/]*$/, ""))
            + "/" + path.replace(/^[\/]+/, "");
        return path;
    };
    
}());
