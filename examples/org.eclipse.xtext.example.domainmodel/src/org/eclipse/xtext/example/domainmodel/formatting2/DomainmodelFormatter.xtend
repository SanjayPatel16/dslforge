/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.domainmodel.formatting2;

import com.google.inject.Inject;
import org.eclipse.xtext.example.domainmodel.domainmodel.AbstractElement;
import org.eclipse.xtext.example.domainmodel.domainmodel.Attribute;
import org.eclipse.xtext.example.domainmodel.domainmodel.DomainModel;
import org.eclipse.xtext.example.domainmodel.domainmodel.Entity;
import org.eclipse.xtext.example.domainmodel.domainmodel.Feature;
import org.eclipse.xtext.example.domainmodel.domainmodel.Operation;
import org.eclipse.xtext.example.domainmodel.domainmodel.PackageDeclaration;
import org.eclipse.xtext.example.domainmodel.domainmodel.Parameter;
import org.eclipse.xtext.example.domainmodel.domainmodel.Reference;
import org.eclipse.xtext.example.domainmodel.services.DomainmodelGrammarAccess;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;

class DomainmodelFormatter extends AbstractFormatter2 {
	
	@Inject extension DomainmodelGrammarAccess

	def dispatch void format(DomainModel domainmodel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AbstractElement elements : domainmodel.getElements()) {
			format(elements, document);
		}
	}

	def dispatch void format(PackageDeclaration packagedeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AbstractElement elements : packagedeclaration.getElements()) {
			format(elements, document);
		}
	}

	def dispatch void format(Entity entity, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Feature features : entity.getFeatures()) {
			format(features, document);
		}
	}

	def dispatch void format(Attribute attribute, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(attribute.getType(), document);
	}

	def dispatch void format(Reference reference, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(reference.getType(), document);
	}

	def dispatch void format(Operation operation, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Parameter params : operation.getParams()) {
			format(params, document);
		}
		format(operation.getType(), document);
	}

	def dispatch void format(Parameter parameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameter.getType(), document);
	}
}
